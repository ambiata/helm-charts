{{- range $.Values.users }}
{{- $username :=  .username -}}
{{- range .accesses }}
apiVersion: batch/v1
kind: Job
metadata:
  name: grant-access-{{ regexReplaceAll "_" $username "-" }}-{{ regexReplaceAll "_" .db "-" }}{{ if .readOnly }}-readonly{{ end }}
spec:
  backoffLimit: 4
  activeDeadlineSeconds: 120
  template:
    metadata:
      {{- with $.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      containers:
      - name: create-user
        image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag }}"
        imagePullPolicy: {{ $.Values.image.pullPolicy }}
        command:
          - /bin/bash
          - -c
          - |
            RUN_TIME=0
            TIMEOUT=60 # 1 minute timeout
            RETRY_DELAY=1
            while [ "$( psql -tAc "SELECT 1 FROM pg_database WHERE datname='${DB}'" )" != '1' ] || [ "$( psql -tAc "SELECT 1 FROM pg_roles where rolname='${USER}'" )" != '1' ];
            do
              if [ $RUN_TIME > $TIMEOUT ]
              then
                echo "${DB} or ${USER} does not exist"
                exit 1
              fi

              echo "Wait for ${DB} and ${USER}"
              sleep $RETRY_DELAY
              $RUN_TIME = $RUN_TIME + $RETRY_DELAY
            done
            
            if [ "$READ_ONLY" = true ]
            then
              for SCHEMA in ${SCHEMAS}
              do
                psql -c "GRANT CONNECT ON DATABASE \"${DB}\" TO \"${USER}\";"
                psql -d ${DB} -c "GRANT USAGE ON SCHEMA ${SCHEMA} TO \"${USER}\";"
                psql -d ${DB} -c "GRANT SELECT ON ALL TABLES IN SCHEMA ${SCHEMA} TO \"${USER}\";"
                psql -d ${DB} -c "GRANT SELECT ON ALL SEQUENCES IN SCHEMA ${SCHEMA} TO \"${USER}\";"
                echo "${USER} now has readonly access to all the tables in the schema ${SCHEMA} in the database ${DB}"
              done
            else
              psql -c "GRANT ALL PRIVILEGES ON DATABASE \"${DB}\" TO \"${USER}\";"
              echo "${USER} now has full access to the database ${DB}"
            fi
        env:
        - name: USER
          value: {{ $username }}
        - name: DB
          value: {{ .db }}
        - name: READ_ONLY
          value: {{ .readOnly | default false | quote }}
        - name: SCHEMAS
          value: {{ .schemas | default ( list "" ) | concat ( list "public" ) | join " " | trim }}
        {{- include "postgres-db-manager.postgresqlAdminCredentialEnvs" $.Values.postgresqlAdminCredentials | indent 8 }}
      restartPolicy: Never
---
{{- end }}
{{- end }}
