apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ include "pgdbsync.fullname" . }}
spec:
  schedule: "{{ .Values.cronjob.schedule }}"
  concurrencyPolicy: "Forbid"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: postgres-to-postgres-sync-cronjob
            image: {{ printf "%s:%s" .Values.image.repository .Values.image.tag }}
            imagePullPolicy: {{ .Values.image.pullPolicy }}
            command: ["/bin/bash", "-c"]
            args:
              - date;

                echo "Synchronize ${SOURCE_SCHEMA}.\"${SOURCE_TABLE}\" to ${TARGET_SCHEMA}.\"${TARGET_TABLE}\"";
                export TARGET_PGUSER=${TARGET_PGUSER:-postgres};

                if [[ "$truncateTargetTable" == "TRUE" ]];
                then 
                  echo "Truncating ${TARGET_SCHEMA}.\"${TARGET_TABLE}\""; 
                  PGHOST=$TARGET_PGHOST PGDATABASE=$TARGET_PGDATABASE PGUSER=$TARGET_PGUSER PGPASSWORD=$TARGET_PGPASSWORD;
                  psql -c "TRUNCATE TABLE ${TARGET_SCHEMA}.\"${TARGET_TABLE}\";"; 
                fi;

                export OLDEST_RECORD=`(PGHOST=$TARGET_PGHOST PGDATABASE=$TARGET_PGDATABASE PGUSER=$TARGET_PGUSER PGPASSWORD=$TARGET_PGPASSWORD psql --tuples-only -c "SELECT COALESCE(MAX(\"${TARGET_TIMESTAMP_COLUMN}\"),'2020-01-01 00:00:00'::timestamp) FROM ${TARGET_SCHEMA}.\"${TARGET_TABLE}\";")`;

                echo "Oldest record timestamp at target ${OLDEST_RECORD}";

                export EXPORTED_RECORDS=`(PGHOST=$SOURCE_PGHOST PGDATABASE=$SOURCE_PGDATABASE PGUSER=$SOURCE_PGUSER PGPASSWORD=$SOURCE_PGPASSWORD psql -c "\copy (SELECT * FROM ${SOURCE_SCHEMA}.\"${SOURCE_TABLE}\" WHERE \"${SOURCE_TIMESTAMP_COLUMN}\" > '${OLDEST_RECORD}'::timestamp AND \"${SOURCE_TIMESTAMP_COLUMN}\" < now()::timestamp - interval '${lagMinutes}' minute) TO '/tmp/pg-to-pg-sync.copy' WITH CSV;" | sed 's/COPY //g')`;

                echo "${EXPORTED_RECORDS} records exported from ${SOURCE_SCHEMA}.\"${SOURCE_TABLE}\"";

                export IMPORTED_RECORDS=`(PGHOST=$TARGET_PGHOST PGDATABASE=$TARGET_PGDATABASE PGUSER=$TARGET_PGUSER PGPASSWORD=$TARGET_PGPASSWORD psql -c "\copy ${TARGET_SCHEMA}.\"${TARGET_TABLE}\" FROM '/tmp/pg-to-pg-sync.copy' WITH CSV;" | sed 's/COPY //g')`;

                echo "${IMPORTED_RECORDS} records imported to ${TARGET_SCHEMA}.\"${TARGET_TABLE}\"";

                export MESSAGE="${ENVIRONMENT} | ${EXPORTED_RECORDS} records exported from ${SOURCE_SCHEMA}.\"${SOURCE_TABLE}\" | ${IMPORTED_RECORDS} records imported to ${TARGET_SCHEMA}.\"${TARGET_TABLE}\"";

                # Make PROM metrics here
            env:
              - name: ENVIRONMENT
                value: {{ .Release.Name }}
              - name: lagMinutes
                value: "{{ .Values.cronjob.lagMinutes }}"
              - name: truncateTargetTable
                {{- if .Values.cronjob.truncateTargetTable }}
                value: "{{ .Values.cronjob.truncateTargetTable }}"
                {{- else }}
                value: "FALSE"
                {{- end }}

              - name: SOURCE_PGHOST
                value: {{ required "Source host is required" .Values.source.host }}
              - name: SOURCE_PGUSER
                value: {{ required "Source user is required" .Values.source.user }}
              - name: SOURCE_PGPASSWORD
                valueFrom:
                  secretKeyRef:
                    name: {{ .Values.source.secret }}
                    key: {{ .Values.source.passwordKey }}
              - name: SOURCE_PGDATABASE
                value: {{ .Values.source.db | required "Source DB is required" }}
              - name: SOURCE_SCHEMA
                value: {{ .Values.source.schema | required "Source schema is required" }}
              - name: SOURCE_TABLE
                value: {{ .Values.source.table | required "Source table is required" }}
              - name: SOURCE_TIMESTAMP_COLUMN
                value: {{ .Values.source.timestamp_column | required "Source timestamp column is required" }}

              - name: TARGET_PGHOST
                value: {{ .Values.target.host | required "Target host is required" }}
              - name: TARGET_PGUSER
                value: {{ .Values.target.user | required "Target user is required" }}
              - name: TARGET_PGPASSWORD
                valueFrom:
                  secretKeyRef:
                    name: {{ .Values.target.secret }}
                    key: {{ .Values.target.passwordKey }}
              - name: TARGET_PGDATABASE
                value: {{ .Values.target.db | required "Target DB is required" }}
              - name: TARGET_SCHEMA
                value: {{ .Values.target.schema | required "Target schema is required" }}
              - name: TARGET_TABLE
                value: {{ .Values.target.table | required "Target table is required" }}
              - name: TARGET_TIMESTAMP_COLUMN
                value: {{ .Values.target.timestamp_column | required "Target timestamp column is required" }}

          restartPolicy: {{ .Values.cronjob.restartPolicy }}

          {{- if .Values.imagePullSecrets }}
          imagePullSecrets:
            {{- toYaml .Values.imagePullSecrets | nindent 12 }}
            - name: {{ .Values.imagePullSecrets }}
          {{- end }}
