apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ include "pgdbsync.fullname" . }}
spec:
  schedule: "{{ $.Values.cronjob.schedule }}"
  concurrencyPolicy: "Forbid"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: postgres-to-postgres-sync-cronjob
            image: {{ printf "%s:%s" $.Values.image.repository $.Values.image.tag }}
            imagePullPolicy: {{ $.Values.image.pullPolicy }}
            command: ["/bin/bash", "-c"]
            args:
              - date;

              {{- range $mapping := $.Values.tableMappings }}
                {{ $inputDB := get $.Values.dbs .inputDB }}
                {{ $outputDB := get $.Values.dbs .outputDB }}

                {{ println $inputDB.name $outputDB.name }}



                echo "Synchronize {{ $inputDB.name }}:{{ .inputSchema  }}.\"{{ .inputTable }}\""
                echo "to {{ $outputDB.name }}:{{ .outputSchema }}.\"${{ .outputTable }}\"";

                {{ if $.Values.cronjob.truncateTargetTable }}
                echo "Truncating {{ $outputDB.name }}:{{ .outputSchema }}.\"${{ .outputTable }}"

                PGHOST={{ $outputDB.host }} PGDATABASE={{ $outputDB.name }} PGUSER={{ $outputDB.user }} PGPASSWORD=${{ .inputDB }};
                psql -c "TRUNCATE TABLE ${TARGET_SCHEMA}.\"${TARGET_TABLE}\";"; 
                {{ end }}



              {{ end }}

                {{- /*


                export OLDEST_RECORD=`(PGHOST=$TARGET_PGHOST PGDATABASE=$TARGET_PGDATABASE PGUSER=$TARGET_PGUSER PGPASSWORD=$TARGET_PGPASSWORD psql --tuples-only -c "SELECT COALESCE(MAX(\"${TARGET_TIMESTAMP_COLUMN}\"),'2020-01-01 00:00:00'::timestamp) FROM ${TARGET_SCHEMA}.\"${TARGET_TABLE}\";")`;

                echo "Oldest record timestamp at target ${OLDEST_RECORD}";

                export EXPORTED_RECORDS=`(PGHOST=$SOURCE_PGHOST PGDATABASE=$SOURCE_PGDATABASE PGUSER=$SOURCE_PGUSER PGPASSWORD=$SOURCE_PGPASSWORD psql -c "\copy (SELECT * FROM ${SOURCE_SCHEMA}.\"${SOURCE_TABLE}\" WHERE \"${SOURCE_TIMESTAMP_COLUMN}\" > '${OLDEST_RECORD}'::timestamp AND \"${SOURCE_TIMESTAMP_COLUMN}\" < now()::timestamp - interval '${lagMinutes}' minute) TO '/tmp/pg-to-pg-sync.copy' WITH CSV;" | sed 's/COPY //g')`;

                echo "${EXPORTED_RECORDS} records exported from ${SOURCE_SCHEMA}.\"${SOURCE_TABLE}\"";

                export IMPORTED_RECORDS=`(PGHOST=$TARGET_PGHOST PGDATABASE=$TARGET_PGDATABASE PGUSER=$TARGET_PGUSER PGPASSWORD=$TARGET_PGPASSWORD psql -c "\copy ${TARGET_SCHEMA}.\"${TARGET_TABLE}\" FROM '/tmp/pg-to-pg-sync.copy' WITH CSV;" | sed 's/COPY //g')`;

                echo "${IMPORTED_RECORDS} records imported to ${TARGET_SCHEMA}.\"${TARGET_TABLE}\"";

                export MESSAGE="${ENVIRONMENT} | ${EXPORTED_RECORDS} records exported from ${SOURCE_SCHEMA}.\"${SOURCE_TABLE}\" | ${IMPORTED_RECORDS} records imported to ${TARGET_SCHEMA}.\"${TARGET_TABLE}\"";

                # Make PROM metrics here
                */}}
            env:
              # Need this for all the screts in DBS...
              # We export passwords to env variables by the DB nickname given in values
              {{ range $db, $dbValues := $.Values.dbs }}
              - name: {{ $dbValues.name }}
                valueFrom:
                  secretKeyRef:
                    name: {{ $dbValues.secret }}
                    key: {{ $dbValues.passwordKey }}
              {{ end }}
              


          restartPolicy: {{ $.Values.cronjob.restartPolicy }}

          {{- if $.Values.imagePullSecrets }}
          imagePullSecrets:
            {{- toYaml $.Values.imagePullSecrets | nindent 12 }}
            - name: {{ $.Values.imagePullSecrets }}
          {{- end }}
